package com.jeanboy.app.mvpdemo.cache.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jeanboy.app.mvpdemo.cache.database.model.TokenModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOKEN_MODEL".
*/
public class TokenModelDao extends AbstractDao<TokenModel, Void> {

    public static final String TABLENAME = "TOKEN_MODEL";

    /**
     * Properties of entity TokenModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, Long.class, "userId", false, "USER_ID");
        public final static Property ExpiresIn = new Property(1, Integer.class, "expiresIn", false, "EXPIRES_IN");
        public final static Property RefreshToken = new Property(2, String.class, "refreshToken", false, "REFRESH_TOKEN");
        public final static Property AccessToken = new Property(3, String.class, "accessToken", false, "ACCESS_TOKEN");
    }


    public TokenModelDao(DaoConfig config) {
        super(config);
    }
    
    public TokenModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOKEN_MODEL\" (" + //
                "\"USER_ID\" INTEGER," + // 0: userId
                "\"EXPIRES_IN\" INTEGER," + // 1: expiresIn
                "\"REFRESH_TOKEN\" TEXT," + // 2: refreshToken
                "\"ACCESS_TOKEN\" TEXT);"); // 3: accessToken
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOKEN_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TokenModel entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        Integer expiresIn = entity.getExpiresIn();
        if (expiresIn != null) {
            stmt.bindLong(2, expiresIn);
        }
 
        String refreshToken = entity.getRefreshToken();
        if (refreshToken != null) {
            stmt.bindString(3, refreshToken);
        }
 
        String accessToken = entity.getAccessToken();
        if (accessToken != null) {
            stmt.bindString(4, accessToken);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TokenModel entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        Integer expiresIn = entity.getExpiresIn();
        if (expiresIn != null) {
            stmt.bindLong(2, expiresIn);
        }
 
        String refreshToken = entity.getRefreshToken();
        if (refreshToken != null) {
            stmt.bindString(3, refreshToken);
        }
 
        String accessToken = entity.getAccessToken();
        if (accessToken != null) {
            stmt.bindString(4, accessToken);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TokenModel readEntity(Cursor cursor, int offset) {
        TokenModel entity = new TokenModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // expiresIn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // refreshToken
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // accessToken
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TokenModel entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExpiresIn(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setRefreshToken(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAccessToken(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TokenModel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TokenModel entity) {
        return null;
    }

    @Override
    public boolean hasKey(TokenModel entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
