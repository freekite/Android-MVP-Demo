package com.jeanboy.app.mvpdemo.cache.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jeanboy.app.mvpdemo.cache.database.model.TokenModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOKEN_MODEL".
*/
public class TokenModelDao extends AbstractDao<TokenModel, Long> {

    public static final String TABLENAME = "TOKEN_MODEL";

    /**
     * Properties of entity TokenModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property ExpiresIn = new Property(2, Long.class, "expiresIn", false, "EXPIRES_IN");
        public final static Property RefreshToken = new Property(3, String.class, "refreshToken", false, "REFRESH_TOKEN");
        public final static Property AccessToken = new Property(4, String.class, "accessToken", false, "ACCESS_TOKEN");
        public final static Property CreateTime = new Property(5, Long.class, "createTime", false, "CREATE_TIME");
    }


    public TokenModelDao(DaoConfig config) {
        super(config);
    }
    
    public TokenModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOKEN_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"EXPIRES_IN\" INTEGER," + // 2: expiresIn
                "\"REFRESH_TOKEN\" TEXT," + // 3: refreshToken
                "\"ACCESS_TOKEN\" TEXT," + // 4: accessToken
                "\"CREATE_TIME\" INTEGER);"); // 5: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOKEN_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TokenModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long expiresIn = entity.getExpiresIn();
        if (expiresIn != null) {
            stmt.bindLong(3, expiresIn);
        }
 
        String refreshToken = entity.getRefreshToken();
        if (refreshToken != null) {
            stmt.bindString(4, refreshToken);
        }
 
        String accessToken = entity.getAccessToken();
        if (accessToken != null) {
            stmt.bindString(5, accessToken);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TokenModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long expiresIn = entity.getExpiresIn();
        if (expiresIn != null) {
            stmt.bindLong(3, expiresIn);
        }
 
        String refreshToken = entity.getRefreshToken();
        if (refreshToken != null) {
            stmt.bindString(4, refreshToken);
        }
 
        String accessToken = entity.getAccessToken();
        if (accessToken != null) {
            stmt.bindString(5, accessToken);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TokenModel readEntity(Cursor cursor, int offset) {
        TokenModel entity = new TokenModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // expiresIn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // refreshToken
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // accessToken
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TokenModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setExpiresIn(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setRefreshToken(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAccessToken(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TokenModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TokenModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TokenModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
